<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CatFacts\Api\Normalizer;

require_once __DIR__.'/../Proxy/FactProxy.php';

use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class FactNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;

    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'CatFacts\\Api\\Model\\Fact';
    }

    public function supportsNormalization($data, $format = null)
    {
        return get_class($data) === 'CatFacts\\Api\\Model\\Fact';
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        if (!is_object($data)) {
            throw new InvalidArgumentException();
        }
        $object = new \FactProxy();
        $properties = $object->__properties();

        if (property_exists($data, '_id')) {
            $properties['_id'] = $data->{'_id'};
        }
        if (property_exists($data, '__v')) {
            $properties['__v'] = $data->{'__v'};
        }
        if (property_exists($data, 'user')) {
            $properties['user'] = $data->{'user'};
        }
        if (property_exists($data, 'text')) {
            $properties['text'] = $data->{'text'};
        }
        if (property_exists($data, 'updatedAt')) {
            $properties['updatedAt'] = \DateTime::createFromFormat("Y-m-d\TH:i:s.vP", $data->{'updatedAt'});
        }
        if (property_exists($data, 'sendDate')) {
            $properties['sendDate'] = $data->{'sendDate'};
        }
        if (property_exists($data, 'deleted')) {
            $properties['deleted'] = $data->{'deleted'};
        }
        if (property_exists($data, 'source')) {
            $properties['source'] = $data->{'source'};
        }
        if (property_exists($data, 'used')) {
            $properties['used'] = $data->{'used'};
        }
        if (property_exists($data, 'type')) {
            $properties['type'] = $data->{'type'};
        }

        return $object;
    }

    public function normalize($object, $format = null, array $context = [])
    {
        $data = new \stdClass();
        $properties = $object->__properties();

        if (null !== $properties['_id']) {
            $data->{'_id'} = $properties['_id'];
        }
        if (null !== $properties['__v']) {
            $data->{'__v'} = $properties['__v'];
        }
        if (null !== $properties['user']) {
            $data->{'user'} = $properties['user'];
        }
        if (null !== $properties['text']) {
            $data->{'text'} = $properties['text'];
        }
        if (null !== $properties['updatedAt']) {
            $data->{'updatedAt'} = $properties['updatedAt']->format("Y-m-d\TH:i:s.vP");
        }
        if (null !== $properties['sendDate']) {
            $data->{'sendDate'} = $properties['sendDate'];
        }
        if (null !== $properties['deleted']) {
            $data->{'deleted'} = $properties['deleted'];
        }
        if (null !== $properties['source']) {
            $data->{'source'} = $properties['source'];
        }
        if (null !== $properties['used']) {
            $data->{'used'} = $properties['used'];
        }
        if (null !== $properties['type']) {
            $data->{'type'} = $properties['type'];
        }

        return $data;
    }
}
